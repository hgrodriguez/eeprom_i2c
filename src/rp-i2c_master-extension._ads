-----------------------------------------------------------------------------
--  This is an extension for the RP.I2C_Master package.
--  This imeplements the capability for enabling/disabling the
--  Stop signal for the address transfer for the procedures
--  Mem_Write
--  Mem_Read
--
--  You CANNOT reference this code directly!
--  You have to copy this package (.ads/.adb) as a whole into your project!
--
--  Copyright 2025 (C) Holger Rodriguez
--
--  SPDX-License-Identifier: BSD-3-Clause
--
package RP.I2C_Master.Extension is

   type I2C_Master_Port_Extended
   is new RP.I2C_Master.I2C_Master_Port with private;

   overriding
   procedure Mem_Write
     (This          : in out I2C_Master_Port_Extended;
      Addr          : HAL.I2C.I2C_Address;
      Mem_Addr      : HAL.UInt16;
      Mem_Addr_Size : HAL.I2C.I2C_Memory_Address_Size;
      Data          : HAL.I2C.I2C_Data;
      Status        : out HAL.I2C.I2C_Status;
      Timeout       : Natural := 1000);

   overriding
   procedure Mem_Read
     (This          : in out I2C_Master_Port_Extended;
      Addr          : HAL.I2C.I2C_Address;
      Mem_Addr      : HAL.UInt16;
      Mem_Addr_Size : HAL.I2C.I2C_Memory_Address_Size;
      Data          : out HAL.I2C.I2C_Data;
      Status        : out HAL.I2C.I2C_Status;
      Timeout       : Natural := 1000);

   --------------------------------------------------------------------------
   --  There are some EEPROM devices, where the Stop signal for the address
   --  sending for Mem_Write/Mem_Read needs to be managed dynamically.
   --  These procedures allow the setting for the Mem_Write/Mem_Read.
   --  Default is: both are Enabled.
   procedure Enable_Mem_Write_Stop
     (This : in out I2C_Master_Port_Extended);

   procedure Disable_Mem_Write_Stop
     (This : in out I2C_Master_Port_Extended);

   procedure Enable_Mem_Read_Stop
     (This : in out I2C_Master_Port_Extended);

   procedure Disable_Mem_Read_Stop
     (This : in out I2C_Master_Port_Extended);

   --------------------------------------------------------------------------
   --  Example of a declaration of this type to use
   --  Definitions of the connections to the EEPROM,
   --  based on the base class defined in RP.I2C_Master
   --     My_Eeprom_I2C_Port : aliased
   --       RP.
   --         I2C_Master.Extension.
   --           I2C_Master_Port_Extended (-- Port number of I2C
   --                                     0,
   --                                     -- I2C peripheral
   --                                     RP2040_SVD.
   --                                       I2C.
   --                                         I2C0_Periph'Access
   --                                    );
   --  Then you can call all procedures/functions as you would with
   --  RP.I2C_Master

private
   type I2C_Master_Port_Extended
   is new RP.I2C_Master.I2C_Master_Port with record
      Stop_W : Boolean := True;
      Stop_R : Boolean := True;
   end record;

end RP.I2C_Master.Extension;
